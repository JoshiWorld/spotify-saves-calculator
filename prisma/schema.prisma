// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "rhel-openssl-1.0.x"]
    previewFeatures = ["tracing"]
}

datasource db {
    provider  = "mongodb"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    campaign     Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId   String    @db.ObjectId
    date         DateTime
    endDate      DateTime?
    budget       Float
    saves        Int
    playlistAdds Int
}

model Campaign {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId      String   @db.ObjectId
    metaCampaignId String
    posts          Post[]
}

model Project {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String      @db.ObjectId
    metaAccount   MetaAccount @relation(fields: [metaAccountId], references: [id], onDelete: Cascade)
    metaAccountId String      @db.ObjectId
    campaigns     Campaign[]
}

model MetaAccount {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    account_status Int
    accountId      String
    name           String
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String    @db.ObjectId
    projects       Project[]
}

model Link {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String         @db.ObjectId
    playbutton    Boolean        @default(false)
    name          String
    enabled       Boolean?
    pixelId       String
    accessToken   String
    testEventCode String?
    artist        String
    songtitle     String
    description   String?
    spotifyUri    String?
    appleUri      String?
    deezerUri     String?
    itunesUri     String?
    napsterUri    String?
    image         String?
    trackings     LinkTracking[]

    @@index([name])
}

model LinkTracking {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
    linkId    String   @db.ObjectId
    actions   Int
    event     String

    @@index([linkId])
}

model Log {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    message   String

    @@index([createdAt], map: "LogTTL")
}

//* FORUM START *//
model Category {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    threads     Thread[]
}

model Thread {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    userId     String       @db.ObjectId
    categoryId String       @db.ObjectId
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    posts      ForumPost[]
    tags       ThreadTags[]

    @@index([categoryId, userId])
}

model ForumPost {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    userId    String    @db.ObjectId
    threadId  String    @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    thread    Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
    votes     Vote[]
    comments  Comment[]
}

model Comment {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    userId    String    @db.ObjectId
    postId    String    @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Tag {
    id      String       @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    threads ThreadTags[]
}

model ThreadTags {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    threadId String @db.ObjectId
    tagId    String @db.ObjectId
    thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([threadId, tagId])
}

model Vote {
    id     String    @id @default(auto()) @map("_id") @db.ObjectId
    userId String    @db.ObjectId
    postId String    @db.ObjectId
    vote   Int
    user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}

//* FORUM END *//

// Copecart
model Product {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    price              Float
    subText            String?
    currency           String   @default("€")
    features           String[]
    featured           Boolean  @default(false)
    buttonText         String?
    additionalFeatures String[]
    link               String
}

// COOKIES CONSENT
model Consent {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?  @db.ObjectId
    anonymousId  String   @unique
    ipHash       String? // für anonyme user
    consentGiven Boolean // true = akzeptiert, false = abgelehnt
    consentType  String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?       @unique
    emailVerified   DateTime?
    image           String?
    metaAccessToken String?
    goodCPS         Float         @default(0.3)
    midCPS          Float         @default(0.5)
    package         Package?
    admin           Boolean       @default(false)
    accounts        Account[]
    sessions        Session[]
    projects        Project[]
    metaAccounts    MetaAccount[]
    links           Link[]
    threads         Thread[]
    posts           ForumPost[]
    comments        Comment[]
    votes           Vote[]
    consent         Consent[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Package {
    STARTER
    ARTIST
    LABEL
}

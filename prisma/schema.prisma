// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "rhel-openssl-1.0.x"]
    previewFeatures = ["tracing"]
}

datasource db {
    provider  = "mongodb"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId   String   @db.ObjectId
    date         DateTime
    budget       Float
    saves        Int
    playlistAdds Int
}

model Campaign {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId      String   @db.ObjectId
    metaCampaignId String
    posts          Post[]
}

model Project {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String      @db.ObjectId
    metaAccount   MetaAccount @relation(fields: [metaAccountId], references: [id], onDelete: Cascade)
    metaAccountId String      @db.ObjectId
    campaigns     Campaign[]
}

model MetaAccount {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    account_status Int
    accountId      String
    name           String
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String    @db.ObjectId
    projects       Project[]
}

model Link {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String   @db.ObjectId
    name          String
    pixelId       String
    accessToken   String
    testEventCode String?
    title         String
    description   String?
    spotifyUri    String?
    appleUri      String?
    deezerUri     String?
    itunesUri     String?
    napsterUri    String?
    image         String?

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?       @unique
    emailVerified   DateTime?
    image           String?
    metaAccessToken String?
    goodCPS         Float         @default(0.3)
    midCPS          Float         @default(0.5)
    premium         Boolean       @default(false)
    admin           Boolean       @default(false)
    accounts        Account[]
    sessions        Session[]
    projects        Project[]
    metaAccounts    MetaAccount[]
    links           Link[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

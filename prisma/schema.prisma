// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId   String   @db.ObjectId
    date         DateTime
    budget       Float
    saves        Int
    playlistAdds Int
}

model Campaign {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String   @db.ObjectId
    posts     Post[]
}

model Project {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String     @db.ObjectId
    campaigns Campaign[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    income        Float?    @default(0)
    premium       Boolean   @default(false)
    admin         Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

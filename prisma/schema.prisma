// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider  = "mongodb"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Post {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    campaign     Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId   String    @db.ObjectId
    date         DateTime
    endDate      DateTime?
    budget       Float
    saves        Int
    playlistAdds Int
}

model Campaign {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId      String   @db.ObjectId
    metaCampaignId String?
    posts          Post[]
}

model Project {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String       @db.ObjectId
    metaAccount   MetaAccount? @relation(fields: [metaAccountId], references: [id], onDelete: Cascade)
    metaAccountId String?      @db.ObjectId
    campaigns     Campaign[]
}

model MetaAccount {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    account_status Int
    accountId      String
    name           String
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String    @db.ObjectId
    projects       Project[]
}

model Link {
    id                  String            @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId              String            @db.ObjectId
    genre               Genre?            @relation(fields: [genreId], references: [id], onDelete: SetNull)
    genreId             String?           @db.ObjectId
    playbutton          Boolean           @default(false)
    name                String
    enabled             Boolean?
    pixelId             String
    accessToken         String
    testEventCode       String?
    artist              String
    songtitle           String
    description         String?
    spotifyUri          String?
    appleUri            String?
    deezerUri           String?
    itunesUri           String?
    napsterUri          String?
    image               String?
    testMode            Boolean           @default(true)
    glow                Boolean           @default(false)
    spotifyGlowColor    String?
    appleMusicGlowColor String?
    itunesGlowColor     String?
    deezerGlowColor     String?
    splittest           Boolean           @default(false)
    splittestVersion    SplittestVersion? @default(DEFAULT)
    trackings           LinkTracking[]
    ConversionLogs      ConversionLogs[]

    @@index([userId])
    @@index([name])
}

model Genre {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    name  String
    links Link[]

    @@index([name])
}

model LinkTracking {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
    linkId    String   @db.ObjectId
    actions   Int
    event     String

    @@index([createdAt, event, linkId])
}

model ConversionLogs {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
    linkId    String   @db.ObjectId
    event     String
    ip        String?
    fbc       String?
    fbp       String?
    country   String?

    @@index([createdAt, event, linkId])
}

model Log {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    message   String
    type      LogType

    @@index([createdAt], map: "LogTTL")
}

// BLOG ROADMAPS
model Blog {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    date         DateTime @default(now())
    title        String
    description  String
    slug         String   @unique
    image        String?
    author       String
    authorAvatar String

    @@index([title, date])
}

model RoadmapItem {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    status      RoadmapStatus
    category    String
    votes       Int           @default(0)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    targetDate  DateTime

    @@index([title, status])
}

//* FORUM START *//

model ForumPost {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    content   Json?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String    @db.ObjectId
    comments  Comment[]
    votes     Vote[]
}

model Comment {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    text      String
    createdAt DateTime  @default(now())
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String    @db.ObjectId
    post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String    @db.ObjectId

    replyToId String?   @db.ObjectId
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("ReplyTo")

    votes CommentVote[]
}

model Vote {
    id     String    @id @default(auto()) @map("_id") @db.ObjectId
    user   User      @relation(fields: [userId], references: [id])
    userId String    @db.ObjectId
    post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String    @db.ObjectId
    type   VoteType
}

model CommentVote {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String   @db.ObjectId
    type      VoteType
}

//* FORUM END *//

model Bug {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String   @db.ObjectId
    type       BugType
    screenshot String?
    message    String
    resolved   Boolean  @default(false)
}

// Copecart
model Product {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    price              Float
    subText            String?
    currency           String   @default("€")
    features           String[]
    featured           Boolean  @default(false)
    buttonText         String?
    additionalFeatures String[]
    link               String
}

// COOKIES CONSENT
model Consent {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?  @db.ObjectId
    anonymousId  String   @unique
    ipHash       String? // für anonyme user
    consentGiven Boolean // true = akzeptiert, false = abgelehnt
    consentType  String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

// Courses
model Course {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    internalName String   @unique
    title        String
    description  String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    thumbnail    String
    productLink  String
    active       Boolean  @default(false)

    // userIds String[] @db.ObjectId
    // users   User[]   @relation(fields: [userIds], references: [id])
    users CourseToUsers[]

    sections CourseSection[]
}

model CourseVideo {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    thumbnail   String
    videoLink   String

    sectionId String        @db.ObjectId
    section   CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

    // userWatchedIds String[] @db.ObjectId
    // usersWatched   User[]   @relation(fields: [userWatchedIds], references: [id])
    usersWatched CourseVideosToUsers[]
}

model CourseVideosToUsers {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String      @db.ObjectId
    courseVideo   CourseVideo @relation(fields: [courseVideoId], references: [id], onDelete: Cascade)
    courseVideoId String      @db.ObjectId

    @@unique([userId, courseVideoId])
}

model CourseToUsers {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String @db.ObjectId
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId String @db.ObjectId

    @@unique([userId, courseId])
}

model CourseSection {
    id       String        @id @default(auto()) @map("_id") @db.ObjectId
    title    String
    courseId String        @db.ObjectId
    course   Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
    videos   CourseVideo[]
}

// Datasaves (Spotify Client, etc.)
model DataSaves {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    state        String
    name         String  @unique
    authCode     String?
    accessToken  String?
    refreshToken String?
    scope        String?
    expiresIn    Int?
    tokenType    String?
}

model Whitelist {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    ip   String @unique
}

model Order {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    digistoreOrderId String   @unique // Das ist der primäre Schlüssel von Digistore24
    productId        String
    productName      String
    customerEmail    String
    firstName        String?
    lastName         String?
    billingType      String?
    paySequenceNo    Int?
    amount           Float?
    currency         String?
    status           String   @default("PENDING") // z.B. "PENDING", "COMPLETED", "REFUNDED", "PAYMENT_MISSED"
    isTestOrder      Boolean  @default(false)
    createdAt        DateTime @default(now())
    lastUpdated      DateTime @updatedAt
}

model Affiliate {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    digistoreId String   @unique
    email       String
    firstName   String?
    lastName    String?
    promolink   String?
    language    String?
    createdAt   DateTime @default(now())
    lastUpdated DateTime @updatedAt
}

model PlaylistAnalyse {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    name String
    playlistId String @unique
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?       @unique
    emailVerified   DateTime?
    image           String?
    metaAccessToken String?
    goodCPS         Float         @default(0.3)
    midCPS          Float         @default(0.5)
    package         Package?
    admin           Boolean       @default(false)
    tester          Boolean       @default(false)
    accounts        Account[]
    sessions        Session[]
    projects        Project[]
    metaAccounts    MetaAccount[]
    links           Link[]
    posts           ForumPost[]
    comments        Comment[]
    votes           Vote[]
    commentVotes    CommentVote[]
    consent         Consent[]
    Bug             Bug[]
    playlistAnalyse PlaylistAnalyse[]

    // courseIds           String[]              @db.ObjectId
    // courses             Course[]              @relation(fields: [courseIds], references: [id])
    // watchedCourseVideosIds String[]      @db.ObjectId
    // watchedCourseVideos    CourseVideo[] @relation(fields: [watchedCourseVideosIds], references: [id])
    courses             CourseToUsers[]
    watchedCourseVideos CourseVideosToUsers[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ENUMS

enum Package {
    STARTER
    ARTIST
    LABEL
}

enum LogType {
    INFO
    ERROR
}

enum BugType {
    BUG
    IMPROVEMENT
}

enum RoadmapStatus {
    PLANNED
    INPROGRESS
    COMPLETED
    REJECTED
}

enum SplittestVersion {
    DEFAULT
    GLOW
}

enum VoteType {
    UP
    DOWN
}
